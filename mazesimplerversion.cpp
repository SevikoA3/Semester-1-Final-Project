#include <iostream>
using namespace std;

//define global variable
int levelCount = 0, xPlayer1, yPlayer1, xPlayer2, yPlayer2;
const int row = 60, column = 30, levelMax = 4;
bool gameStop = false, appStop = false, inputValid = true, exitApp;
char inputKey, map[column][row];

//declare it first and then define it at the end
void maps();

void setup(){
    //setting up the maps
    maps();
    
    //finding player x and y position and put them on xPlayer1 and yPlayer1 variable
    bool loopStop = false;
    gameStop = false;
    system("cls");
    for (int i = 0; i < column && !loopStop; i++){
        for (int j = 0; j < row && !loopStop; j++){
            if (map[i][j] == '@'){
                xPlayer1 = j;
                yPlayer1 = i;
                loopStop = true;
            }
        }
    }

    xPlayer2 = xPlayer1;
    yPlayer2 = yPlayer1;

    //changing '#' to ASCII code 219 character
    for (int i = 0; i < column; i++){
        for (int j = 0; j < row; j++){
            if (map[i][j] == '#') map[i][j] = 219;
        }
    }
}

void input(){
    //inputting user input ('w', 'a', 's', and 'd') for movement
    cout << "\nInput your movement (w = up, a = left, s = down, d = left, and q to exit): " << endl << ">> ";
    cin >> inputKey;
    if (inputKey == 'w') yPlayer1--;
    else if (inputKey == 'a') xPlayer1--;
    else if (inputKey == 's') yPlayer1++;
    else if (inputKey == 'd') xPlayer1++;
    else if (inputKey == 'q') exitApp = true;
    else inputValid = false;
}

void logic(){
    //checking whether player can move or not on y axis
    if (yPlayer2 != yPlayer1){
        if (map[yPlayer1][xPlayer1] == '!'){
            map[yPlayer1][xPlayer1] = 'X';
            map[yPlayer2][xPlayer1] = ' ';
            yPlayer2 = yPlayer1;
            gameStop = true;
        }
        else if (map[yPlayer1][xPlayer1] != ' ') (yPlayer1 > yPlayer2 ? yPlayer1-- : yPlayer1++);
        else {
            map[yPlayer1][xPlayer1] = '@';
            map[yPlayer2][xPlayer1] = ' ';
            yPlayer2 = yPlayer1;
        }
    }
    
    //checking whether player can move or not on x axis
    else if (xPlayer2 != xPlayer1){
        if (map[yPlayer1][xPlayer1] == '!'){
            map[yPlayer1][xPlayer1] = 'X';
            map[yPlayer1][xPlayer2] = ' ';
            xPlayer2 = xPlayer1;
            gameStop = true;
        }
        else if (map[yPlayer1][xPlayer1] != ' ') (xPlayer1 > xPlayer2 ? xPlayer1-- : xPlayer1++);
        else {
            map[yPlayer1][xPlayer1] = '@';
            map[yPlayer1][xPlayer2] = ' ';
            xPlayer2 = xPlayer1;
        }
    }
}

void draw(){
    //check if the player want to exit the app
    if (exitApp){
        system("cls");
        cout << "\n\n\n\n\n\t\t\tThank You for Playing!\n\n\n\n\n";
        exit(0);
    }

    system("cls");
    cout << "\n\t\tFinish The Maze Below!" << endl << endl;
    for (int i = 0; i < column; i++) cout << map[i] << endl;

    //if the input is not valid from previous input
    if(!inputValid){
        cout << "The input is not valid";
        inputValid = true;
    }
}

int main(){
    //welcome menu before the game start
    system("cls");
    cout << "\n\n\n\n\n\t\t\tWelcome to The Simple Maze Game.\n\n\n\n\n" << endl;
    system("pause");

    //start of the program
    while(!appStop){
        setup();
        while (!gameStop){
            draw();
            input();
            logic();
        }

        //call draw function again to draw the ! to X and remove the input text
        draw();

        //checking if the game is finsihed
        if (levelCount + 1 == levelMax) {
            cout << "\nLevel " << levelCount + 1 << " is Finished." << endl
                 << "Game Over!\n\n";
            system("pause");
            system("cls");
            cout << "\n\n\n\n\n\t\t\tThank You for Playing!\n\n\n\n\n";
            appStop = true;
        }
        
        //to stop or continue the game inputed by the user
        else {
            cout << "\nLevel " << levelCount + 1 << " is Finished.";
            while(true){
                cout << "\nContinue to The Next Level? (y/n)" << endl  << ">> ";
                cin >> inputKey;
                if (inputKey == 'y'){
                    levelCount++;
                    break;
                }
                else if (inputKey == 'n'){
                    appStop = true;
                    system("cls");
                    cout << "\n\n\n\n\n\t\t\tThank You for Playing!\n\n\n\n\n";
                    break;
                }
                else cout << "your input is not valid." << endl;
            }
        }
    }
}

void maps(){
    //map list and map declaration
    char mapsLevel[levelMax][column][row] = {

        //level 1
        {"###########################################################",
         "#####################################################  ####",
         "#####################################################  ####",
         "######                                                 ####",
         "######  ###################################################",
         "######  ###########################               #########",
         "######  ###########################  ###########  #########",
         "######  ######################       ###########  #########",
         "######  #####################  #################  #########",
         "######  ##############         #################  #########",
         "######  ##############  ############              #########",
         "######  ##############  #######################  ##########",
         "######  ##############  ###       ##############  #########",
         "######  ##############  ###   !   ###############     #####",
         "######                  ###       ##################  #####",
         "######################  ######### ##################  #####",
         "####    ##############  ######### ######              #####",
         "######    ############  ########  ######  ##########  #####",
         "#######   ############            ######         ###  #####",
         "########  ###################################### ###  #####",
         "###@                                                     ##",
         "######  #############################################  ####",
         "######  #############################################  ####",
         "######                                                 ####",
         "###########################################################"},
        
        //lavel 2
        {"###########################################################",
         "###########################################################",
         "###@                                                  #####",
         "#######  #####  ####################################  #####",
         "#######  #####  ####################################  #####",
         "#######  #####  ####################################  #####",
         "#######  #####                                  ####  #####",
         "#######  ##############  ######  #############  ####     ##",
         "#######  ##############  ######  #############  #######  ##",
         "#######     ###########  ######          #####  #######  ##",
         "##########  ###########  ##############  #####  #######  ##",
         "##########               ##############  #####  #######  ##",
         "##########  ###############       #####     #   #######  ##",
         "##########  #        ######   !   ############  #######  ##",
         "##########  #  ####  ######       ############  ####     ##",
         "##########     ####  ###########  ############  ####  #####",
         "###################  ###########  ############  ####  #####",
         "###################         ####  ##            ####  #####",
         "##########################  ####  ##  ##############  #####",
         "##########################  ####  ##  ##############     ##",
         "##########################  ####  ##  #################  ##",
         "#####                       ####      #################  ##",
         "#####  ################################################  ##",
         "#####                                                    ##",
         "###########################################################"},

         //level 3
         {"###########################################################",
         "###########        ##     !################################",
         "### ####### ###### ## ######################         ######",
         "###   ##### ###### ## ####### ############## ####### ######",
         "#####       ###### ##                  ##### ####### ######",
         "##### ##### ######    ####### ########               ######",
         "########### ################# ############## ##############",
         "#####   ### ############      ############## ##############",
         "####### ### ################# ######### #### ##############",
         "####### ### ################# #########            ########",
         "####### ### #####      ################ ###################",
         "####### ### ##########                  ###################",
         "####### ### ########## ################        ############",
         "####### ##  ########## ###              ###### ############",
         "####### ## ########### ############ ########## ############",
         "####### ##               ########## ###             #######",
         "###     ################ #####       ## ########### #######",
         "#######      #########      ########    ########### #######",
         "####### ############## ### ######### ## ########### #######",
         "#######                ###         #### ########### #######",
         "####### ###### ########### ####### #### ######      #######",
         "####### ###### #########   #######      ########### #######",
         "####### ######     ##### ######### ################ #######",
         "####### ########## #####  ########          ####### #######",
         "####### ########## ###### ################# ####### #######",
         "####### ##########        #################         #######",
         "#    ############# ######################## ###### ########",
         "# ##   ###########                          ###          ##",
         "#@####             ########################################",
         "###########################################################"},

        //level 4
        {"###########################################################",
         "#                                                         #",
         "# ########## ####### ############################### ######",
         "# #          ####         ##########################   ## #",
         "# # ############# ####### ##########  ##           ###    #",
         "# # #     #     # ##      ##      ##  ##  #######  ### ####",
         "# # # ### #     ############ ####     ##  # #####  ### ## #",
         "# #   ### # ###############    #####      # #####  ##  #  #",
         "# # ##### # ############### ## ## #########    #   ## ## ##",
         "# # #####   ## ####         ## ##         # ## # #### ##  #",
         "# # ##### # ## #### ##  ###### ###### ##### ## # #### ### #",
         "# #   ### # ##      ##  ###### ###### ##### ##          # #",
         "# ### ### # ## #### ##  ###       ### ##### ########### # #",
         "#   #     # ## ##   ##  ###   !   ###        ##         # #",
         "### # ##### ####### ##  ###       ### ### ######## ###### #",
         "#   #    ############################   #            #### #",
         "# ### ## ##  ########################## ############ #  # #",
         "# #   ## ### ###    ##    ##    ##    # #   #   #### #  # #",
         "# # ####   # ### ## ## ## ## ## ## ## #   #   # #### #  # #",
         "#   # ## # # ### ## ## ## ## ## ## ## ############## #  # #",
         "# # #    #       ##    ##    ##    ##                #### #",
         "# ####################################################### #",
         "#                                                         #",
         "############################################@##############",
         "###########################################################"}
    };

    //declaring map from mapslevel
    for(int i = 0; i < column; i++){
        for (int j = 0; j < row; j++) map[i][j] = mapsLevel[levelCount][i][j];
    }
}